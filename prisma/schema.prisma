

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                    @id @default(autoincrement())
  login             String                 @unique @db.VarChar(150)
  password          String                 @db.VarChar(255)
  name              String?                @db.VarChar(80)
  cellphone         String?                @db.VarChar(15) 
  isActive          Boolean?               @default(true)
  isauthorized      Boolean?               @default(false)
  emailValidation   Boolean?               @default(false)  
  role              Role                   @default(CLIENT)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now()) @updatedAt
  apelido           String?                @db.VarChar(30)
  ultimaAutorizacao String?                @db.VarChar(100)
  ultimoacesso      DateTime?
  userAutorizacao   User_Authorization[]
  @@map("system_users")
}

enum Role {
  CLIENT
  ADMIN
  ROOT
}

model User_Authorization {
  id        Int      @id @default(autoincrement())
  iduser    Int
  createdAt DateTime @default(now())
  action    Boolean?
  user      User  @relation(fields: [iduser], references: [id])
  @@index([iduser], map: "system_user_authorizations_iduser_fkey")
  @@map("system_user_authorization")
}

model User_Reset_Password {
  id        Int      @id @default(autoincrement())
  iduser    Int
  email     String
  code      String
  expiresAt DateTime?
  ip        String?
  userAgent String?
  isUsed    Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@index([iduser], map: "system_user_reset_passwords_iduser_fkey")
  @@map("system_user_reset_passwords")
}


model System_Config {
  id                          Int      @id @default(autoincrement())
  email_host                  String?  @db.LongText
  email_port                  String?  @db.LongText
  email_user                  String?  @db.LongText
  email_pass                  String?  @db.LongText
  email_secure                Boolean?  @default(false)
  email_tls                   Boolean?  @default(true)    // verdadeiro tls e falso ssl
  email_from                  String?   @db.VarChar(80)   // nome de quem enviou o email = Ex. Sistema Dapesi Contabilidade
  keyapibackend               String?   @db.LongText
  noticias_ultimasquantidade  Int?      @default(8)
  padraolinhaspaginas         Int?      @default(10)
  forcartrocasenhaemDias      Int?      @default(28)
  linkncmantesreforma         String?   @db.LongText
  ativo                       Boolean?  @default(true)  
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @default(now()) @updatedAt
  @@map("system_config")
}

model System_email_template {
  id                          Int      @id @default(autoincrement())
  title_email                 String?  @db.VarChar(100)
  subject_email               String?  @db.VarChar(100)
  body_html                   String?  @db.LongText  
  ativo                       Boolean? @default(true)  
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @default(now()) @updatedAt
  @@map("system_email_templates")
}


model ValidationUser {
  id              Int      @id @default(autoincrement())
  code            String   @db.VarChar(10)
  registerdate    DateTime @default(now())
  validationdate  DateTime?
  userid          Int
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now()) @updatedAt
  @@map("users_validation")
}

model Sensor_Reading {
  id           Int      @id @default(autoincrement())
  sensor       String
  value        String
  registerdate DateTime @default(now())
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now()) @updatedAt

  @@map("sensors_readings")
}